# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LggTOSmdb6n7BABvaUjuZQPvRO0td-r1

PCA without using built in Python libary
"""

import random
import math

def generate_data(n_samples=10, n_features=3):
    return [[random.random() for _ in range(n_features)] for _ in range(n_samples)]

def center_data(X):
    n_samples = len(X)
    n_features = len(X[0])
    means = [sum(row[i] for row in X) / n_samples for i in range(n_features)]
    centered = [[row[i] - means[i] for i in range(n_features)] for row in X]
    return centered, means

def covariance_matrix(X):
    n_samples = len(X)
    n_features = len(X[0])
    cov = [[0.0] * n_features for _ in range(n_features)]

    for i in range(n_features):
        for j in range(n_features):
            cov[i][j] = sum(X[k][i] * X[k][j] for k in range(n_samples)) / (n_samples - 1)
    return cov

def power_iteration(matrix, num_iter=100):
    n = len(matrix)
    b = [random.random() for _ in range(n)]

    for _ in range(num_iter):
        # multiply matrix * b
        b_new = [sum(matrix[i][j] * b[j] for j in range(n)) for i in range(n)]
        # normalize
        norm = math.sqrt(sum(val**2 for val in b_new))
        b = [val / norm for val in b_new]
# eigenvalue = Rayleigh quotient
    Ab = [sum(matrix[i][j] * b[j] for j in range(n)) for i in range(n)]
    eigenvalue = sum(b[i] * Ab[i] for i in range(n))

    return eigenvalue, b

def deflate(matrix, eigenvalue, eigenvector):
    n = len(matrix)
    for i in range(n):
        for j in range(n):
            matrix[i][j] -= eigenvalue * eigenvector[i] * eigenvector[j]
    return matrix

def pca(X, n_components=2):
    X_centered, means = center_data(X)
    cov = covariance_matrix(X_centered)

    eigvals, eigvecs = [], []

    for _ in range(n_components):
        val, vec = power_iteration(cov)
        eigvals.append(val)
        eigvecs.append(vec)
        cov = deflate(cov, val, vec)

    # Project data onto eigenvectors
    transformed = []
    for row in X_centered:
        transformed.append([sum(row[i] * vec[i] for i in range(len(vec))) for vec in eigvecs])

    return transformed, eigvals, eigvecs

X = generate_data(12, 3)
transformed, eigvals, eigvecs = pca(X, n_components=2)

print("Original data (first 3 rows):", X[:3])
print("Eigenvalues:", eigvals)
print("Eigenvectors:", eigvecs)
print("Transformed data (first 3 rows):", transformed[:3])